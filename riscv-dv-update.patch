diff --git a/scripts/renode_log_to_trace_csv.py b/scripts/renode_log_to_trace_csv.py
index 351cf29..76040c5 100644
--- a/scripts/renode_log_to_trace_csv.py
+++ b/scripts/renode_log_to_trace_csv.py
@@ -63,14 +63,8 @@ def process_renode_sim_log(log_name, csv_name):
     gpr_to_name = {m[0]: m[1] for m in GPR_NAMES}
     known_gpr = {m[0].upper() for m in GPR_NAMES}
 
-    # FIXME: We need a previous PC each time. Assume its value for the first
-    # entry.
-    prev_pc = "80000000"
-
-    # FIXME: Assume initial state of all GPR set to 0
-    state   = {m[0].upper(): "0" for m in GPR_NAMES}
-    trace   = []
-
+    state = None
+    trace = []
     with open(log_name, "r") as fp:
         for line in fp:
 
@@ -90,34 +84,34 @@ def process_renode_sim_log(log_name, csv_name):
             fields = line.replace("REGDUMP:", "").split(",")
             regs = {fields[i]: fields[i+1] for i in range(0, len(fields), 2)}
 
-            # Compute state difference
-            diff  = {r: regs[r] for r in known_gpr \
-                     if r in state and r in regs and state[r] != regs[r]}
-            state = regs
+            if state:
+                # Compute state difference
+                diff = {r: regs[r] for r in known_gpr \
+                         if r in state and r in regs and state[r] != regs[r]}
+
+                # Format the entry
+                entry = RiscvInstructionTraceEntry()
+                entry.pc        = f"{int(state['PC'], 16):08x}"
+                entry.binary    = "0"
+                entry.operand   = ""
+                entry.mode      = "0"
+
+                # GPRs
+                for x in range(32):
+                    name = "X{}".format(x)
+                    if name in diff:
+                        lname = name.lower()
+                        value = int(diff[name], 16)
+                        entry.gpr.append("{}:{:08x}".format(gpr_to_name[lname], value))
+
+                # CSRs
+                # TODO:
+
+                # Add only if there is a GPR/CSR change
+                if entry.gpr or entry.csr:
+                    trace.append(entry)
 
-            # Format the entry
-            entry = RiscvInstructionTraceEntry()
-            entry.pc        = prev_pc
-            entry.binary    = "0"
-            entry.operand   = ""
-            entry.mode      = "0"
-
-            # GPRs
-            for x in range(32):
-                name = "X{}".format(x)
-                if name in diff:
-                    lname = name.lower()
-                    value = int(diff[name], 16)
-                    entry.gpr.append("{}:{:08x}".format(gpr_to_name[lname], value))
-
-            # CSRs
-            # TODO:
-
-            # Add only if there is a GPR/CSR change
-            if entry.gpr or entry.csr:
-                trace.append(entry)
-
-            prev_pc = state["PC"]
+            state = regs
 
     return trace
 
diff --git a/scripts/renode_wrapper.py b/scripts/renode_wrapper.py
index 16c097f..5a9a276 100644
--- a/scripts/renode_wrapper.py
+++ b/scripts/renode_wrapper.py
@@ -29,8 +29,15 @@ machine LoadPlatformDescription @{repl}
 
 sysbus LoadELF @{elf}
 
+# String substitution isn't possible here since this template has variables substituted before being used.
+set PRINT_REGDUMP "print('REGDUMP:PC,' + cpu.PC.ToString() + ',' + ','.join(['X' + str(i) + ',' + cpu.X[i].ToString() for i in range(32)]))"
+
+# Let's not guess initial values.
+python 'cpu = emulationManager.CurrentEmulation.Machines[0].SystemBus.GetCPUs()[0]'
+python $PRINT_REGDUMP
+
 cpu MaximumBlockSize 1
-cpu SetHookAtBlockEnd "print('REGDUMP:' + ','.join(self.GetRegistersValues()))"
+cpu SetHookAtBlockEnd $PRINT_REGDUMP
 cpu InstallCustomInstructionHandlerFromString "00000000000000000000000001110011" "print('ECALL:');"
 
 emulation RunFor "0.001"
-- 
2.47.2

